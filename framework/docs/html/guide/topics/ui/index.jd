page.title=用户界面
@jd:body

<div id="qv-wrapper">
<div id="qv">

  <h2>文档目录</h2>
  <ol>
    <li><a href="#ViewHierarchy">视图层次(View Hierarchy)</a></li>
    <li><a href="#Layout">布局(Layout)</a></li>
    <li><a href="#Widgets">部件(Widgets)</a></li>
    <li><a href="#Events">UI事件(UI Events</a></li>
    <li><a href="#Menus">菜单(Menus)</a></li>
    <li><a href="#Advanced">高级话题(Advanced Topics)</a>
      <ol>
        <li><a href="#Adapters">适配器(Adapters)</a></li>
        <li><a href="#StylesAndThemes">风格与主题(Styles and Themes)</a></li>
      </ol>
    </li>
  </ol>

  <h2>关键类</h2>
  <ol>
    <li>{@link android.view.View}</li>
    <li>{@link android.view.ViewGroup}</li>
    <li>{@link android.widget Widget classes}</li>
  </ol>
</div>
</div>

<p>在一个Android应用中，用户界面是由 {@link android.view.View} 和 
{@link android.view.ViewGroup} 对象构成的. View与ViewGroup都有很多种类，而它们都是
 {@link android.view.View} 类的子类.</p>

<p>View对象是Android平台中用户界面体现的基础单位。
View类是它称为“widgets（工具）”的子类的基础，它们提供了诸如文本输入框和按钮之类的UI对象的完整实现。 
ViewGroup类同样为其被称为“Layouts（布局）”的子类奠定了基础，它们提供了象流式布局、表格布局以及相对布局之类的布局架构。</p>

<p>View对象是一个数据体，它的属性存储了用于屏幕上一块矩形区域的布局参数及内容。
并负责这块它所辖的这个矩形区域之中所有测量、布局、焦点转换、卷动以及按键/触摸手势的处理。
作为一个用户界面对象，View同时也担任着用户交互关键点以及交互事件接受者的角色。
</p>


<h2 id="ViewHierarchy">视图层次(View Hierarchy)</h2>

<p>在Android平台上, 你可以用下图所示的View和ViewGroup层次图来定义一个Activity的UI。
这个层次树可随你所愿的简单或者复杂化，你能使用Android预定义的一套工具和布局来创建它，
或者使用你自己定义的Views来创建。</p>

<img src="{@docRoot}images/viewgroup.png" alt="" width="312" height="211" align="center"/>

<p>
为了把一个视图层次树展现到屏幕上，你的Activity必须调用
<code>{@link android.app.Activity#setContentView(int) setContentView()}</code> 
方法 ，并传给它一个根节点对象的引用。 Android系统将接受此引用，并用来进行界面的失效、测量并绘制这棵树。
层次的根结点会要求它的子节点进行自我绘制 &mdash; 进而, 每个视图组节点也负责通知它的子视图进行自我绘制。
子节点将向父节点申请绘制的位置以及大小，而其父类享有子节点绘制的位置及大小的最终决定权。
Android依次（自层次树顶层开始）解析你布局中的元素，实例化View并将它们添加到它们的父节点中。
因为这个过程是依次进行的，所以如果出现了元素重叠的情况，最后一个绘制的元素将位于所有重叠元素之上显现。</p>

<p>如欲获得更多关于视图层次如何测算以及绘制细节的讨论，情参阅 <a href="how-android-draws.html">如何绘制视图</a>.</p>


<h2 id="Layout">布局(Layout)</h2>

<p>定义并展现你的视图层次的最常用的方法是使用XML布局文件。
如同HTML一样，XML为布局提供了一种人性化可读的结构。XML中的每个元素都是View或ViewGroup对象（抑或它们的子类）。
View对象是树的叶节点，而ViewGroup对象是树的分支（参阅楼上的视图层次图）。</p>
<p>XML元素的名称与它体现的Java类相对应。所以一个 <code>&lt;TextView></code> 元素将在你的UI中生成一个 {@link android.widget.TextView} , 
而一个 <code>&lt;LinearLayout></code> 元素创建一个
 {@link android.widget.LinearLayout} 视图容器。
当你载入一个布局资源时，Android系统会根据你布局中的元素初始化这些运行时对象。</p>

<p>举例来说，一个包含文本视图和一个按钮的简单垂直布局如下：</p>
<pre>
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="fill_parent" 
              android:layout_height="fill_parent"
              android:orientation="vertical" >
    &lt;TextView android:id="@+id/text"
              android:layout_width="wrap_content"
              android:layout_height="wrap_content"
              android:text="Hello, I am a TextView" />
    &lt;Button android:id="@+id/button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Hello, I am a Button" />
&lt;/LinearLayout>
</pre>

<p>请注意：LinearLayout 元素包含了TextView 和Button 对象。
你可以在其中另外安置一个LinearLayout （或其它类型的视图组），以扩展这个视图层次，构建更复杂的布局。</p>

<p>欲获知更多如何构建UI布局的内容，请参阅 <a href="declaring-layout.html">布局定义</a>。

<div class="sidebox-wrapper">
<div class="sidebox">
  <p><b>提示:</b> 你也可以在Java代码中绘制视图和视图组对象，用 <code>{@link android.view.ViewGroup#addView(View)}</code> 方法 
  来动态插入新的视图和视图组对象</p>
</div>
</div>

<p>你可以用各种方式来布置你的视图(views)。利用更多不同种类的视图组，你可以有无数种的方法来构建子视图(views)和视图组。
Android平台提供一些预定义的视图组(在Android平台中称为布局)包括： LinearLayout, RelativeLayout,
TableLayout, GridLayout 等等.每种布局提供特有的一组参数来定义布局结构和子视图的位置 </p>
<p>欲获知一些不同类型布局的使用，请参阅To learn about some of the different kinds of view groups used for a layout, 
请参阅 <a href="layout-objects.html">普通布局对象</a>.</p>


<h2 id="Widgets">部件(Widgets)</h2>

<p>部件是为用户交互界面提供服务的视图对象。
Android提供了一套完整的部件实现，包括按钮、复选框、文本输入框等，以助于你快速的构建UI。
Android还提供了一些更高级的部件，比如日期选择、时钟以及缩放控制。
但您并没有被局限于Android平台提供的这些部件上。如果您想创建一些您自己的定制动作元素，您可以这么做，
只要自己定义的视图对象是扩展或合并现有的部件就行。</p>
<p>更多请参阅 <a href="custom-components.html">构建自定义组件</a>.</p>

<p>您可以在 {@link android.widget} 包中找到Android提供的部件列表。</p>


<h2 id="Events">UI事件(UI Events)</h2>

<p>当你在用户界面中加入了一些视图和工具之后，你可能想要知道如何让它们与用户交互，进而实现你的动作。
如欲获得用户界面事件通知，你需要做以下两件事情之一：</p>
<ul>
  <li><strong>定义一个事件侦听器并将其注册至视图。</strong> 通常情况下，这是你侦听事件的主要方式。
View类包含了一大堆命名类似On<em>&lt;something></em>Listener的接口, 每个都带有一个叫做 <code>On<em>&lt;something></em>()</code>的回调方法。
例如, {@link android.view.View.OnClickListener} (用来处理视图中的点击),
{@link android.view.View.OnTouchListener} (用来处理视图中的触屏事件), 和
{@link android.view.View.OnKeyListener} (用来处理视图中的设备按键事件)。
所以，如果你希望你的视图在它被”点击”（比如选择了一个按钮）的时候获得通知，你就要实现OnClickListener，
定义它的 <code>onClick()</code> 回调方法 (在其中进行相应处理), 并将它用 <code>{@link android.view.View#setOnClickListener(View.OnClickListener) setOnClickListener()}</code>方法注册到视图上.
</li>
  <li><strong>为视图覆写一个现有的回调方法。</strong> 这种方法主要用于你自己实现了一个View类，并想侦听其上发生的特定事件。
比如说当屏幕被触摸 (<code>{@link android.view.View#onTouchEvent(MotionEvent) onTouchEvent()}</code>)， 
当轨迹球发生了移动 (<code>{@link android.view.View#onTrackballEvent(MotionEvent) onTrackballEvent()}</code>)，
或者是设备上的按键被按下(<code>{@link android.view.View#onKeyDown(int, KeyEvent)
onKeyDown()}</code>)。这种方式允许你为自己定制的视图中发生的每个事件定义默认的行为，并决定是否需要将事件传递给其它的子视图。
再说一次，这些是View类相关的回调方法，
所以你只能在你
<a href="{@docRoot}guide/topics/ui/custom-components.html">构建自定义组件</a>时定义它们。
</li>
</ul>

<p>如何在视图中处理用户交互请参见 <a href="ui-events.html">处理UI事件</a>
文档</p>


<h2 id="Menus">菜单(Menus)</h2>

<p>应用程序菜单是应用程序用户界面中另外一个重要的组成部分。菜单为展现应用程序功能和设置提供了一个可靠的界面。
按下设备上的MENU键会调出最普通的应用程序菜单。然而，你也可以加入当用户长按一个项目时调出的上下文菜单。</p>

<p>菜单也是用视图层次进行构架的，但你不必自己定义这个架构。你只要为你的Activity定义 <code>{@link android.app.Activity#onCreateOptionsMenu(Menu) onCreateOptionsMenu()}</code> 或 
<code>{@link android.app.Activity#onCreateContextMenu(ContextMenu,View,ContextMenu.ContextMenuInfo) onCreateContextMenu()}</code> 
回调方法，并声明你想要包含在菜单中的项目就行了。
Android将为你的菜单自动创建视图层次，并在其中绘入你的菜单项。</p>

<p>菜单会自行处理它们的事件，所以你不必为你菜单中的项目注册事件侦听器。当你菜单中的一项被选定时，框架将自动调用  <code>{@link android.app.Activity#onOptionsItemSelected(MenuItem) 
onOptionsItemSelected()}</code> 或 
<code>{@link android.app.Activity#onContextItemSelected(MenuItem) onContextItemSelected()}</code>
方法。</p>

<p>如同应用程序布局一样。你也可以在一个XML文件中定义你菜单中的项目。</p>

<p>更多信息，请参阅 <a href="{@docRoot}guide/topics/ui/menus.html">创建菜单</a> to learn more.</p>


<h2 id="Advanced">高级话题(Advanced Topics)</h2>

<p>一旦你对创建用户界面的基础了如指掌，你就可以尝试着用一些高级功能来创建更加复杂的应用程序界面。</p>

<h3 id="Adapters">适配器(Adapters)</h3>

<p>有时候你会想要用一些无法硬编码的信息来填充视图组。你想将源于外部的数据绑定到你的视图中。
为达到这个目的，你可以使用AdapterView作为你的视图组，
并用Adapter传来的数据初始化每个子视图并填入其中。</p>
<p>AdapterView对象是一个用给定的Adapter对象为基础构建它的子视图的ViewGroup实现。
而Adapter在你的数据源（可能是一个外部字符串数组）和显示这些数据的AdapterView之间扮演着一个信使的角色。
针对特定的任务有着很多不同的Adapter类实现，
比如CursorAdapter依据Cursor读出一个数据库的数据，而一个ArrayAdapter则从任一个数组进行读取。</p>
<p>想要了解如何运用Adapter填充你的视图，请参见 
<a href="binding.html">用AdapterView绑定至数据</a>.</p>


<h3 id="StylesAndThemes">风格与主题(Styles and Themes)</h3>

<p>或许你对标准工具的外表不是那么满意。为了解决这个问题，你可以创建你自己的风格和主题。</p>

<ul>
  <li>风格是一套包含一个或多个格式化属性的整体，你可以把它们加诸于你布局中的单个元素之上。
比如，你可以定义一个包含特定文本字体大小和颜色的风格，并将它单独施用于特定的视图元素。</li>
  <li>主题也是一套包含一个或多个格式化属性的整体，但却应用于一个应用程序中的所有Activity，或单独一个Activity。比如说，你可以定义一个包含了特定窗口边框颜色和版面背景、以及一套字体大小和菜单颜色的主题。这个主题可以施用于特定的Activity抑或整个应用程序。</li>
</ul>

<p>风格与主题隶属于资源。Android提供了一些默认的风格和主题供你使用，你也可以定制你自己的风格和主题资源。</p>
<p>想了解更多关于使用风格和主题的内容，请参阅
<a href="themes.html">使用风格和主题</a> 文档。</p>
